variables:
    REPO_NAME: gitlab.com/technonauts/akordo

stages:
    - test
    - build
    - deploy

unit-tests:
    stage: test
    image: golang:latest
    tags: # This stage will only use runners with both of the following tags
        - building
        - testing
    rules:
        - if: $CI_MERGE_REQUEST_ID                # Execute jobs in merge request context
        - if: $CI_COMMIT_BRANCH == 'master' # Execute jobs when a new commit is pushed to master branch
    script:
        # setup environment
        - mkdir -p /root/akordo/
        - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
        - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
        - cd $GOPATH/src/$REPO_NAME
        # run testing
        - go fmt $(go list ./... | grep -v /vendor/)
        # Ignoring go vet since imported package forces the use of unkeyed fields in some structs
        #- go vet $(go list ./... | grep -v /vendor/)
        - go test -race $(go list ./... | grep -v /vendor/)

compile:
    stage: build
    image: golang:latest
    tags: # This stage will only use runners with both of the following tags
        - building
        - testing
    rules:
        - if: $CI_COMMIT_TAG  # Execute jobs when a new tag is pushed
    script:
        # setup environment
        - mkdir -p /root/akordo/
        - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
        - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
        - cd $GOPATH/src/$REPO_NAME
        # start build
        - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/akordo
        - cp $CI_PROJECT_DIR/akordo /root/akordo/versions/akordo-$CI_COMMIT_TAG

run:
    stage: deploy
    tags: # This stage will only use runners with both of the following tags
        - deploy
        - prod
    rules:
        - if: $CI_COMMIT_TAG  # Execute jobs when a new tag is pushed
    script:
        # stop the systemd service
        - systemctl stop akordo.service
        # fail the pipeline if `cd` fails
        - cd /usr/local/bin/akordo/ || exit 1
        # When a file is opened and locked by a process, any other process is not allowed to write into it,
        # and in particular to completely overwrite it. Renaming avoids this problem.
        - mv akordo akordo.prev
        # copy current version to directory with base name
        - cp /home/techadmin/akordo/versions/akordo-$CI_COMMIT_TAG /usr/local/bin/akordo/akordo
        # restart systemd service
        - systemctl start akordo.service
